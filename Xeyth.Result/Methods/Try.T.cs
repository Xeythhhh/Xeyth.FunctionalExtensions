using Xeyth.Result.Reasons;

namespace Xeyth.Result;

public partial class Result
{
    /// <summary>Attempts to execute the specified <paramref name="func"/>. If an exception is thrown, the <paramref name="exceptionHandler"/> transforms the exception into an <see cref="IError"/>.</summary>
    /// <typeparam name="TValue">The type of the value returned by <paramref name="func"/>.</typeparam>
    /// <param name="func">The function to execute.</param>
    /// <param name="exceptionHandler">A function to handle exceptions and transform them into an <see cref="IError"/>. Defaults to <see cref="Error.DefaultExceptionalErrorFactory"/>.</param>
    /// <returns>A successful <see cref="Result{TValue}"/> containing the result of <paramref name="func"/>, or a failed result with an error generated by <paramref name="exceptionHandler"/>.</returns>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="func"/> is <see langword="null"/>.</exception>
    public static Result<TValue> Try<TValue>(Func<TValue> func, Func<Exception, IError>? exceptionHandler = null)
    {
        ArgumentNullException.ThrowIfNull(func);

        try
        {
            return Ok(func());
        }
        catch (Exception exception)
        {
            exceptionHandler ??= Error.DefaultExceptionalErrorFactory;
            return Fail(exceptionHandler(exception));
        }
    }

    /// <summary>Attempts to execute the specified <paramref name="func"/> that returns a <see cref="Result{TValue}"/>. If an exception is thrown, the <paramref name="exceptionHandler"/> transforms the exception into an <see cref="IError"/>.</summary>
    /// <typeparam name="TValue">The type of the value contained in the <see cref="Result{TValue}"/> returned by <paramref name="func"/>.</typeparam>
    /// <param name="func">The function to execute.</param>
    /// <param name="exceptionHandler">A function to handle exceptions and transform them into an <see cref="IError"/>. Defaults to <see cref="Error.DefaultExceptionalErrorFactory"/>.</param>
    /// <returns>The <see cref="Result{TValue}"/> returned by <paramref name="func"/>, or a failed result with an error generated by <paramref name="exceptionHandler"/>.</returns>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="func"/> is <see langword="null"/>.</exception>
    public static Result<TValue> Try<TValue>(Func<Result<TValue>> func, Func<Exception, IError>? exceptionHandler = null)
    {
        ArgumentNullException.ThrowIfNull(func);

        try
        {
            return func();
        }
        catch (Exception exception)
        {
            exceptionHandler ??= Error.DefaultExceptionalErrorFactory;
            return Fail(exceptionHandler(exception));
        }
    }
}
