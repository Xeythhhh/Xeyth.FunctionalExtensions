name: Publish Packages

on:
  push:
    tags:
      - 'pack-*'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Set Version from Git Tag
      id: version
      run: |
        VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^v//')  # Extract version from tag
        echo "Version=${VERSION}" >> $GITHUB_ENV
    
    - name: Increment Version and Pack
      shell: pwsh
      run: |
        $projects = @("Xeyth.Result", "Xeyth.Primitives")
        $tag = "$(git describe --tags --exact-match)" # Get the current tag
        if (-not $tag) {
          Write-Host "No tag found. Skipping version increment and packing."
          exit 0
        }
      
        # GitHub Packages base API endpoint
        $githubApiUrl = "https://nuget.pkg.github.com/${{ github.repository_owner }}"
      
        foreach ($project in $projects) {
          # Fetch the latest version from GitHub Packages
          $packageName = $project -replace '\.', '-'
          $versionApiUrl = "$githubApiUrl/v3-flatcontainer/$packageName/index.json"
      
          try {
            $response = Invoke-RestMethod -Uri $versionApiUrl -Headers @{ Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}" }
            $allVersions = $response.versions
            $currentVersion = $allVersions[-1] # Get the latest version
          } catch {
            Write-Host "Failed to fetch version for $project. Defaulting to 1.0.0."
            $currentVersion = "1.0.0"
          }
      
          # Parse the current version
          if ($currentVersion -match '^(\d+)\.(\d+)\.(\d+)$') {
            $major = [int]$Matches[1]
            $minor = [int]$Matches[2]
            $patch = [int]$Matches[3]
      
            # Increment the appropriate version part
            switch ($tag) {
              'pack-major' { $major++; $minor = 0; $patch = 0 }
              'pack-minor' { $minor++; $patch = 0 }
              'pack-patch' { $patch++ }
              default { Write-Host "Unknown tag: $tag. Skipping $project."; continue }
            }
      
            # Construct the new version
            $newVersion = "$major.$minor.$patch"
            Write-Host "Updated $project to version $newVersion."
      
            # Pack the project
            dotnet pack "$project/$project.csproj" --no-build --configuration Release -o ./artifacts /p:PackageVersion=$newVersion
          } else {
            Write-Host "Failed to parse current version for $project. Skipping."
          }
        }

    - name: Publish Packages
      if: success()  # Only run if previous steps succeed
      run: | 
        dotnet nuget add source --username Xeythhhh --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Xeythhhh/index.json"
        dotnet nuget push ./artifacts/*.nupkg --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }} --source github
        dotnet nuget push ./artifacts/*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json"
