name: Publish Packages

on:
  workflow_dispatch:
    inputs:
      increment:
        description: 'Version increment type (major, minor, patch)'
        required: true
        default: 'patch'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Pack
      shell: pwsh
      run: |
        # Get all projects matching the criteria
        $projects = Get-ChildItem -Recurse -Filter '*.csproj' | Where-Object {
            $_.FullName -like '*Xeyth.*' -and
            $_.FullName -notlike '*.Tests.csproj' -and
            $_.FullName -notlike '*.Benchmarks.csproj'
        } | ForEach-Object {
            $csprojContent = Get-Content $_.FullName
            if ($csprojContent -notmatch '<IsPackable>\s*false\s*</IsPackable>') {
                $_.FullName
            }
        }
        
        if (-not $projects) {
            Write-Host "No packable projects found."
            exit 0
        }
        
        # Convert project file paths to project names
        $projects = $projects | ForEach-Object {
            [System.IO.Path]::GetFileNameWithoutExtension($_)
        }
        Write-Host "Found projects: $($projects -join ', ')"

        $packageApiUrl = "https://api.github.com/users/${{ github.repository_owner }}/packages/nuget/"
        $currentCommit = git rev-parse HEAD
        
        foreach ($project in $projects) {
          
          Write-Host "Updating $($project)..."

          $packageName = $project -replace '\.', '-'
          $versionApiUrl = "$($packageApiUrl)$($project)/versions"
          
          try {
            $response = Invoke-RestMethod -Uri $versionApiUrl -Headers @{ Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"; Accept = "application/vnd.github+json" }
            $currentVersion = $response[0].name
            $lastPackaged = # extract commit from Description "...{rest of description} built with commit $currentCommit"
          } 
          catch {
            Write-Host "Failed to fetch version for $($project). Defaulting to 1.0.0."
            $currentVersion = "1.0.0"
            $lastPackaged = $null
          }  
          
          Write-Host "Last packaged @ $lastPackaged"

          if ($lastPackaged -ne $null){
            $hasChanges = git diff --name-only $lastPackaged..$currentCommit $project
            if (-not $hasChanges) {
              Write-Host "No changes detected for $($project). Skipping."
              continue
            }
          }
          
          # Parse the current version
          if ($currentVersion -match '^(\d+)\.(\d+)\.(\d+)$') {
            $major = [int]$Matches[1]
            $minor = [int]$Matches[2]
            $patch = [int]$Matches[3]
      
            # Increment the appropriate version part
            $increment = "${{ github.event.inputs.increment }}"
            switch ($increment) {
              'major' { $major++; $minor = 0; $patch = 0 }
              'minor' { $minor++; $patch = 0 }
              'patch' { $patch++ }
              default { Write-Host "Unknown increment: $($increment). Skipping $($project)."; continue }
            }
      
            $newVersion = "$($major).$($minor).$($patch)"
            $projectFile = "$($project)/$($project).csproj"
            [xml]$csproj = Get-Content $projectFile

            # TODO append "built with commit $currentCommit"
            $descriptionNode = $csproj.Project.PropertyGroup.Description
            if (-not $descriptionNode) {
                # add description node and value
            } else {
                # update description as description + "built with commit $currentCommit"
            }
            $csproj.Save($projectFile)
            
            Write-Host "Updated $($project) to version $($newVersion)."
            
            dotnet pack $projectFile --no-build --configuration Release -o ./artifacts /p:PackageVersion=$newVersion /p:CommitHash=$(git rev-parse HEAD)
          } else { Write-Host "Failed to parse current version for $($project). Skipping." }
        }

    - name: Publish Packages
      if: success()  # Only run if previous steps succeed
      run: | 
        dotnet nuget add source --username Xeythhhh --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/Xeythhhh/index.json"
        dotnet nuget push ./artifacts/*.nupkg --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }} --source github
        # dotnet nuget push ./artifacts/*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json"
